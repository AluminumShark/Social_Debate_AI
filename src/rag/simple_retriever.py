"""
Á∞°ÂåñÁâàÊ™¢Á¥¢Âô®
Áï∂ Chroma ÂêëÈáèË≥áÊñôÂ∫´‰∏çÂèØÁî®ÊôÇ‰ΩøÁî®
"""

import json
from pathlib import Path
from typing import List, Dict, Optional
import numpy as np
from dataclasses import dataclass

@dataclass
class RetrievalResult:
    """Ê™¢Á¥¢ÁµêÊûú"""
    content: str
    score: float
    metadata: Dict
    doc_id: str

class SimpleRetriever:
    """Á∞°ÂåñÁâàÊ™¢Á¥¢Âô®Ôºå‰ΩøÁî® JSON Á¥¢Âºï"""
    
    def __init__(self, index_path: str = "src/rag/data/rag/simple_index.json"):
        self.index_path = Path(index_path)
        self.documents = []
        self._load_index()
    
    def _load_index(self):
        """ËºâÂÖ• JSON Á¥¢Âºï"""
        if self.index_path.exists():
            with open(self.index_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                self.documents = data.get('documents', [])
                print(f"‚úÖ ËºâÂÖ•Á∞°ÂñÆÁ¥¢Âºï: {len(self.documents)} ÂÄãÊñáÊ™î")
        else:
            print(f"‚ö†Ô∏è Êâæ‰∏çÂà∞Á¥¢ÂºïÊ™îÊ°à: {self.index_path}")
            self.documents = []
    
    def retrieve(self, query: str, top_k: int = 5) -> List[RetrievalResult]:
        """
        Á∞°ÂñÆÁöÑÈóúÈçµÂ≠óÊ™¢Á¥¢
        
        Args:
            query: Êü•Ë©¢Â≠ó‰∏≤
            top_k: ËøîÂõûÁµêÊûúÊï∏Èáè
            
        Returns:
            Ê™¢Á¥¢ÁµêÊûúÂàóË°®
        """
        if not self.documents:
            print("‚ö†Ô∏è Ê≤íÊúâÂèØÁî®ÁöÑÊñáÊ™î")
            return []
        
        # Á∞°ÂñÆÁöÑÈóúÈçµÂ≠óÂåπÈÖçË©ïÂàÜ
        query_terms = query.lower().split()
        results = []
        
        for doc in self.documents:
            content = doc.get('content', '').lower()
            metadata = doc.get('metadata', {})
            
            # Ë®àÁÆóÂåπÈÖçÂàÜÊï∏
            score = 0.0
            for term in query_terms:
                if term in content:
                    score += 1.0
            
            # ËÄÉÊÖÆÊñáÊ™îÂìÅË≥™ÂàÜÊï∏
            quality_score = metadata.get('quality_score', 0.5)
            final_score = (score / len(query_terms)) * 0.7 + quality_score * 0.3
            
            results.append(RetrievalResult(
                content=doc.get('content', ''),
                score=final_score,
                metadata=metadata,
                doc_id=doc.get('id', '')
            ))
        
        # ÊåâÂàÜÊï∏ÊéíÂ∫è
        results.sort(key=lambda x: x.score, reverse=True)
        
        # ËøîÂõûÂâç k ÂÄãÁµêÊûú
        top_results = results[:top_k]
        print(f"üîç Ê™¢Á¥¢Âà∞ {len(top_results)} ÂÄãÁµêÊûú")
        
        return top_results
    
    def retrieve_by_topic(self, topic: str, top_k: int = 5) -> List[RetrievalResult]:
        """Êåâ‰∏ªÈ°åÊ™¢Á¥¢"""
        results = []
        
        for doc in self.documents:
            metadata = doc.get('metadata', {})
            doc_topic = metadata.get('topic', '')
            
            if topic.lower() in doc_topic.lower():
                results.append(RetrievalResult(
                    content=doc.get('content', ''),
                    score=metadata.get('quality_score', 0.5),
                    metadata=metadata,
                    doc_id=doc.get('id', '')
                ))
        
        # ÊåâÂìÅË≥™ÂàÜÊï∏ÊéíÂ∫è
        results.sort(key=lambda x: x.score, reverse=True)
        return results[:top_k]
    
    def get_stats(self) -> Dict:
        """Áç≤ÂèñÁµ±Ë®àË≥áË®ä"""
        topics = {}
        types = {}
        
        for doc in self.documents:
            metadata = doc.get('metadata', {})
            
            # Áµ±Ë®à‰∏ªÈ°å
            topic = metadata.get('topic', 'unknown')
            topics[topic] = topics.get(topic, 0) + 1
            
            # Áµ±Ë®àÈ°ûÂûã
            doc_type = metadata.get('type', 'unknown')
            types[doc_type] = types.get(doc_type, 0) + 1
        
        return {
            'total_documents': len(self.documents),
            'topics': topics,
            'types': types,
            'index_path': str(self.index_path)
        } 